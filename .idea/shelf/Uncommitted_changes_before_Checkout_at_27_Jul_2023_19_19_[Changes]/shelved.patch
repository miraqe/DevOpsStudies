Index: Pipelines.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"encoding/json\"\r\n\t\"github.com/prometheus/client_golang/prometheus\"\r\n\t\"github.com/prometheus/client_golang/prometheus/promauto\"\r\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\r\n\t\"io\"\r\n\t\"log\"\r\n\t\"math/rand\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n\t\"time\"\r\n)\r\n\r\n// Collect metrics for monitoring and observability purposes.\r\nfunc collectMetrics() {\r\n\tgo func() {\r\n\t\tfor {\r\n\t\t\topsProcessed.Inc() // Increment the total number of HTTP requests\r\n\t\t\ttime.Sleep(2 * time.Second)\r\n\t\t\tduration := rand.Float64()\r\n\t\t\topsDuration.Observe(duration) // Record the duration of HTTP requests\r\n\t\t\ttime.Sleep(time.Second)\r\n\t\t}\r\n\t}()\r\n}\r\n\r\n// Create Prometheus custom metrics to collect and expose for monitoring requests and latency.\r\nvar (\r\n\topsProcessed = promauto.NewCounter(prometheus.CounterOpts{\r\n\t\tName: \"httpTotalRequests\",\r\n\t\tHelp: \"TOTAL NUMBER OF HTTP REQUESTS\",\r\n\t})\r\n)\r\n\r\nvar (\r\n\topsDuration = promauto.NewSummary(prometheus.SummaryOpts{\r\n\t\tName: \"httpDuration\",\r\n\t\tHelp: \"HTTP REQUEST DURATION IN SECONDS\",\r\n\t})\r\n)\r\n\r\n// Add a function Config, which represents configuration from a JSON file.\r\ntype Config struct {\r\n\tPipedriveAPIToken string `json:\"pipedrive_api_token\"`\r\n}\r\n\r\n// Add a function loadConfig, which loads the configuration from the \"config.json\" file.\r\nfunc loadConfig() (Config, error) {\r\n\tvar config Config\r\n\tfile, err := os.Open(\"config.json\")\r\n\tif err != nil {\r\n\t\treturn config, err\r\n\t}\r\n\tdefer file.Close()\r\n\r\n\tdecoder := json.NewDecoder(file)\r\n\terr = decoder.Decode(&config)\r\n\treturn config, err\r\n}\r\n\r\n// getDealsHandler handles the HTTP request for getting deals from the Pipedrive API.\r\nfunc getDealsHandler(w http.ResponseWriter, r *http.Request) {\r\n\tvar apiToken = os.Getenv(\"PIPEDRIVE_API_TOKEN\")\r\n\tpipedriveURL := \"https://api.pipedrive.com/v1/deals?api_token=\" + apiToken\r\n\r\n\t// Create a new GET request to the Pipedrive API\r\n\treq, err := http.NewRequest(http.MethodGet, pipedriveURL, nil)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error creating Pipedrive API request:\", err)\r\n\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Create a new HTTP client\r\n\tclient := &http.Client{}\r\n\r\n\t// Send the request to the Pipedrive API\r\n\tresp, err := client.Do(req)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error sending request to Pipedrive API:\", err)\r\n\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\t// Read the response body from the Pipedrive API\r\n\tbody, err := io.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error reading response body from Pipedrive API:\", err)\r\n\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\tprintln(\"Connection Successful! Showing all deals: \", string(body))\r\n\r\n\t// Set the appropriate headers and write the response body to the client\r\n\tw.Header().Set(\"Content-Type\", \"application/json\")\r\n\tw.WriteHeader(resp.StatusCode)\r\n\tw.Write(body)\r\n}\r\n\r\n// addDealHandler handles the HTTP request for adding a new deal to the Pipedrive API.\r\nfunc addDealHandler(w http.ResponseWriter, r *http.Request) {\r\n\tvar payloadData map[string]interface{}\r\n\r\n\t// Read the request body to get the payload data\r\n\tbody, err := io.ReadAll(r.Body)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error reading request body:\", err)\r\n\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Unmarshal the request body into the payloadData map\r\n\terr = json.Unmarshal(body, &payloadData)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error un-marshaling request body:\", err)\r\n\t\thttp.Error(w, \"Bad Request\", http.StatusBadRequest)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Call addDeal with the mock-up request, response, and payload data\r\n\taddDeal(w, r, payloadData)\r\n}\r\n\r\n// addDeal adds a new deal to the Pipedrive API using the provided payload data.\r\nfunc addDeal(w http.ResponseWriter, r *http.Request, payloadData map[string]interface{}) {\r\n\tvar apiToken = os.Getenv(\"PIPEDRIVE_API_TOKEN\")\r\n\tpipedriveURL := \"https://api.pipedrive.com/v1/deals?api_token=\" + apiToken\r\n\r\n\t// Convert the payload data to JSON format\r\n\tpayloadBytes, err := json.Marshal(payloadData)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error converting payload to JSON:\", err)\r\n\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Create a new POST request to the Pipedrive API with the payload\r\n\treq, err := http.NewRequest(http.MethodPost, pipedriveURL, bytes.NewBuffer(payloadBytes))\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error creating a request to connect to Pipedrive API: \", err)\r\n\t\thttp.Error(w, \"Internal Server Error \", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\t// Set the content type to JSON\r\n\treq.Header.Set(\"Content-Type\", \"application/json\")\r\n\r\n\t// Create a new HTTP client\r\n\tclient := &http.Client{}\r\n\r\n\t// Send the request to the Pipedrive API\r\n\tresp, err := client.Do(req)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error sending request to Pipedrive API: \", err)\r\n\t\treturn\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\t// Read the response body from Pipedrive API\r\n\tbody, err := io.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error reading response from Pipedrive API: \", err)\r\n\t\thttp.Error(w, \"Internal Server Error \", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\tprintln(\"Connection Successful! Deal added: \", string(body))\r\n\r\n\t// Make sure response is in JSON and write the response to the client\r\n\tw.Header().Set(\"Content-Type\", \"application/json\")\r\n\tw.WriteHeader(resp.StatusCode)\r\n\tw.Write(body)\r\n}\r\n\r\n// changeDealHandler handles the HTTP request for changing an existing deal in the Pipedrive API.\r\nfunc changeDealHandler(w http.ResponseWriter, r *http.Request) {\r\n\tvar payloadData map[string]interface{}\r\n\r\n\t// Read the request body to get the payload data\r\n\tbody, err := io.ReadAll(r.Body)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error reading the request body: \", err)\r\n\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\terr = json.Unmarshal(body, &payloadData)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error un-marshaling request body: \", err)\r\n\t\thttp.Error(w, \"Bad Request\", http.StatusBadRequest)\r\n\t\treturn\r\n\t}\r\n\tchangeDeal(w, r, payloadData)\r\n}\r\n\r\n// changeDeal changes an existing deal in the Pipedrive API using the provided payload data.\r\nfunc changeDeal(w http.ResponseWriter, r *http.Request, payloadData map[string]interface{}) {\r\n\tvar apiToken = os.Getenv(\"PIPEDRIVE_API_TOKEN\")\r\n\tpipedriveURL := \"https://api.pipedrive.com/v1/deals/44?api_token=\" + apiToken\r\n\r\n\tpayloadBytes, err := json.Marshal(payloadData)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error marshaling Payload Data: \", err)\r\n\t\thttp.Error(w, \"Internal Server Error: \", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\r\n\treq, err := http.NewRequest(http.MethodPut, pipedriveURL, bytes.NewBuffer(payloadBytes))\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error creating a new request to Pipedrive API: \", err)\r\n\t\thttp.Error(w, \"Internal Server Error: \", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\treq.Header.Set(\"Content-Type\", \"application/json\")\r\n\r\n\tclient := &http.Client{}\r\n\r\n\tresp, err := client.Do(req)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error reading a response from Pipedrive API: \", err)\r\n\t\thttp.Error(w, \"Internal Server Error: \", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\t// Read the response body from Pipedrive API\r\n\tbody, err := io.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\tlog.Println(\"Error reading response from Pipedrive API: \", err)\r\n\t\thttp.Error(w, \"Internal Server Error \", http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\tprintln(\"Connection Successful! Deal changed: \", string(body))\r\n\r\n\t// Make sure response is in JSON and write the response to the client\r\n\tw.Header().Set(\"Content-Type\", \"application/json\")\r\n\tw.WriteHeader(resp.StatusCode)\r\n\tw.Write(body)\r\n}\r\n\r\nfunc main() {\r\n\tcollectMetrics()\r\n\r\n\thttp.HandleFunc(\"/getDeals\", getDealsHandler)\r\n\thttp.HandleFunc(\"/addDeal\", addDealHandler)\r\n\thttp.HandleFunc(\"/changeDeal\", changeDealHandler)\r\n\thttp.Handle(\"/metrics\", promhttp.Handler())\r\n\r\n\tlog.Println(\"Server started on port 8081\")\r\n\tlog.Fatal(http.ListenAndServe(\":8081\", nil))\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pipelines.go b/Pipelines.go
--- a/Pipelines.go	(revision 8f72658ca453ada29aec7a1d60c2a8d4b7cfac4d)
+++ b/Pipelines.go	(date 1690474751897)
@@ -47,7 +47,7 @@
 	PipedriveAPIToken string `json:"pipedrive_api_token"`
 }
 
-// Add a function loadConfig, which loads the configuration from the "config.json" file.
+// Add a function loadConfig, which loads the configuration key from the "config.json" file.
 func loadConfig() (Config, error) {
 	var config Config
 	file, err := os.Open("config.json")
